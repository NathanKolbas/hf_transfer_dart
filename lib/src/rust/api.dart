// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `download_async`, `download_chunk`, `exponential_backoff`, `jitter`, `upload_async`, `upload_chunk`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `Error`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`, `fmt`, `from`, `from`, `from`

/// max_files: Number of open file handles, which determines the maximum number of parallel downloads
/// parallel_failures:  Number of maximum failures of different chunks in parallel (cannot exceed max_files)
/// max_retries: Number of maximum attempts per chunk. (Retries are exponentially backed off + jitter)
///
/// The number of threads can be tuned by the environment variable `TOKIO_WORKER_THREADS` as documented in
/// https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.worker_threads
Future<void> download({
  required String url,
  required String filename,
  required BigInt maxFiles,
  required BigInt chunkSize,
  BigInt? parallelFailures,
  BigInt? maxRetries,
  Map<String, String>? headers,
  required FutureOr<void> Function(BigInt) callback,
}) => RustLib.instance.api.crateApiDownload(
  url: url,
  filename: filename,
  maxFiles: maxFiles,
  chunkSize: chunkSize,
  parallelFailures: parallelFailures,
  maxRetries: maxRetries,
  headers: headers,
  callback: callback,
);

/// parts_urls: Dictionary consisting of part numbers as keys and the associated url as values
/// completion_url: The url that should be called when the upload is finished
/// max_files: Number of open file handles, which determines the maximum number of parallel uploads
/// parallel_failures:  Number of maximum failures of different chunks in parallel (cannot exceed max_files)
/// max_retries: Number of maximum attempts per chunk. (Retries are exponentially backed off + jitter)
///
/// The number of threads can be tuned by the environment variable `TOKIO_WORKER_THREADS` as documented in
/// https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.worker_threads
///
/// See https://docs.aws.amazon.com/AmazonS3/latest/userguide/mpuoverview.html for more information
/// on the multipart upload
Future<List<Map<String, String>>> multipartUpload({
  required String filePath,
  required List<String> partsUrls,
  required BigInt chunkSize,
  required BigInt maxFiles,
  BigInt? parallelFailures,
  BigInt? maxRetries,
  required FutureOr<void> Function(BigInt) callback,
}) => RustLib.instance.api.crateApiMultipartUpload(
  filePath: filePath,
  partsUrls: partsUrls,
  chunkSize: chunkSize,
  maxFiles: maxFiles,
  parallelFailures: parallelFailures,
  maxRetries: maxRetries,
  callback: callback,
);

String version() => RustLib.instance.api.crateApiVersion();
